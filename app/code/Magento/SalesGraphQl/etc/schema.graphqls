# Copyright © Magento, Inc. All rights reserved.
# See COPYING.txt for license details.

type Query {
    customerOrders: CustomerOrders @resolver(class: "Magento\\SalesGraphQl\\Model\\Resolver\\Orders") @deprecated(reason: "Use orders from customer instead") @cache(cacheable: false)
}

type Customer {
    orders (
        filter: CustomerOrdersFilterInput @doc(description: "Defines the filter to use for searching customer orders"),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1"),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. The default value is 20"),
    ): CustomerOrders @resolver(class: "Magento\\SalesGraphQl\\Model\\Resolver\\CustomerOrders") @cache(cacheable: false)
}

input CustomerOrdersFilterInput @doc(description: "Identifies the filter to use for filtering orders.") {
    number: FilterStringTypeInput @doc(description: "Filters by order number.")
}

type CustomerOrders @doc(description: "The collection of orders that match the conditions defined in the filter") {
    items: [CustomerOrder]! @doc(description: "An array of customer orders")
    page_info: SearchResultPageInfo @doc(description: "An object that includes the current_page page_info and page_size values specified in the query")
    total_count: Int @doc(description: "The total count of customer orders")
}

type CustomerOrder @doc(description: "Contains details about each of the customer's orders") {
    increment_id: String @deprecated(reason: "Use the id attribute instead")
    order_number: String! @deprecated(reason: "Use the number attribute instead")
    created_at: String @deprecated(reason: "Use the order_date attribute instead")
    grand_total: Float  @deprecated(reason: "Use the totals.grand_total attribute instead")
    id: ID! @doc(description: "Unique identifier for the order")
    order_date: String! @doc(description: "The date the order was placed")
    status: String! @doc(description: "The current status of the order")
    number: String! @doc(description: "The order number")
    order_items: [OrderItem]! @doc(description: "An array containing the items purchased in this order") @resolver(class: "Magento\\SalesGraphQl\\Model\\Resolver\\OrderItem")
    totals: OrderTotal! @doc(description: "Contains details about the calculated totals for this order") @resolver(class: "Magento\\SalesGraphQl\\Model\\Resolver\\OrderTotal")
}

type OrderItem implements SalesItemInterface {
    quantity_ordered: Float @doc(description: "The number of units ordered for this item")
}

interface SalesItemInterface @typeResolver(class: "Magento\\SalesGraphQl\\Model\\SalesItemTypeResolver") {
    product_name: String @doc(description: "Name of the base product")
    product_sku: String! @doc(description: "SKU of the base product")
    product_sale_price: Money! @doc(description: "The sale price of the base product, including selected options")
    discounts: [Discount] @doc(description: "Final discount information for the product")
    parent_product_sku: String @doc(description: "For configurable or bundle products, the SKU of the parent product")
    parent_product_name: String @doc(description: "Name of parent product like configurable or bundle")
    selected_options: [SalesItemOption] @doc(description: "The selected options for the base product, such as color or size")
    entered_options: [SalesItemOption] @doc(description: "The entered option for the base product, such as a logo or image")
}

type SalesItemOption @doc(description: "Contains the ID and value for the selected or entered options") {
    id: String! @doc(description: "The name of the option")
    value: String! @doc(description: "The value of the option")
}

interface SalesTotalAmountInterface @typeResolver(class: "Magento\\SalesGraphQl\\Model\\SalesTotalAmountTypeResolver") {
    subtotal: Money! @doc(description: "The subtotal of the order, excluding shipping, discounts, and taxes")
    discounts: [Discount] @doc(description: "The applied discounts to the order")
    total_tax: Money! @doc(description: "The amount of tax applied to the order")
    taxes: [TaxItem]! @doc(description: "The order taxes details")
    grand_total: Money! @doc(description: "The final total amount, including shipping, discounts, and taxes")
    base_grand_total: Money! @doc(description: "The final base grand total amount in the base currency")
}
​
type OrderTotal implements SalesTotalAmountInterface @doc(description: "Contains details about the sales total amounts used to calculate the final price") {
    total_shipping: Money! @doc(description: "The order shipping amount")
    shipping_handling: ShippingHandling!  @doc(description: "The shipping and handling costs details for the order")
}


type ShippingHandling @doc(description: "The Shipping handling details") {
    total_amount: Money! @doc(description: "The Shipping total amount")
    amount_inc_tax: Money @doc(description: "The Shipping amount including tax")
    amount_exc_tax: Money @doc(description: "The Shipping amount excluding tax")
    taxes: [TaxItem]! @doc(description: "The Shipping taxes details")
}

type TaxItem @doc(description: "The tax item details") {
    amount: Money! @doc(description: "The Tax amount")
    title: String! @doc(description: "The Tax item title")
    rate: Float @doc(description: "The Tax item rate")
}

type Mutation {
    reorderItems(orderNumber: String!): ReorderItemsOutput @doc(description:"Adds all products from a customer's previous order to the cart.") @resolver(class: "Magento\\SalesGraphQl\\Model\\Resolver\\Reorder")
}

type ReorderItemsOutput {
    cart: Cart! @doc(description:"Contains detailed information about the customer's cart.")
    userInputErrors:[CheckoutUserInputError]! @doc(description:"An array of reordering errors.")
}

type CheckoutUserInputError @doc(description:"An error encountered while adding an item the the cart."){
    message: String! @doc(description: "Localized error message")
    path: [String]! @doc(description: "Path to the input field that caused an error. See the GraphQL specification about path errors for details: http://spec.graphql.org/draft/#sec-Errors")
    code: CheckoutUserInputErrorCodes! @doc(description: "Checkout-specific error code")
}

enum CheckoutUserInputErrorCodes {
    REORDER_NOT_AVAILABLE
    PRODUCT_NOT_FOUND
    NOT_SALABLE
    INSUFFICIENT_STOCK
    UNDEFINED
}
