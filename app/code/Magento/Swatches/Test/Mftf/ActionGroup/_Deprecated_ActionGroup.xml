<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<!--
NOTICE: Action Groups in this file are DEPRECATED and SHOULD NOT BE USED anymore.
        Please find the Comment with proper replacement for each of ActionGroups provided.
-->
<actionGroups xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/actionGroupSchema.xsd">
    <actionGroup name="setColorPickerByHex">
        <annotations>
            <description>Sets the provided HEX value in the provided Color Picker.</description>
        </annotations>
        <arguments>
            <argument name="nthColorPicker" type="string" defaultValue="1"/>
            <argument name="hexColor" type="string" defaultValue="e74c3c"/>
        </arguments>

        <!-- NOTICE: This ActionGroup is DEPRECATED! Use `SetColorPickerByHexActionGroup` instead -->
        <pressKey selector="{{AdminColorPickerSection.hexByIndex(nthColorPicker)}}" parameterArray="[\Facebook\WebDriver\WebDriverKeys::BACKSPACE,\Facebook\WebDriver\WebDriverKeys::BACKSPACE,\Facebook\WebDriver\WebDriverKeys::BACKSPACE,\Facebook\WebDriver\WebDriverKeys::BACKSPACE,\Facebook\WebDriver\WebDriverKeys::BACKSPACE,\Facebook\WebDriver\WebDriverKeys::BACKSPACE,'{{hexColor}}']" stepKey="fillHex1"/>
        <click selector="{{AdminColorPickerSection.submitByIndex(nthColorPicker)}}" stepKey="submitColor1"/>
    </actionGroup>

    <actionGroup name="assertSwatchColor">
        <annotations>
            <description>Validates that the provided Color Picker contains the provided Style.</description>
        </annotations>
        <arguments>
            <argument name="nthSwatch" type="string" defaultValue="1"/>
            <argument name="expectedStyle" type="string" defaultValue="background: rgb(0, 0, 0);"/>
        </arguments>

        <!-- NOTICE: This ActionGroup is DEPRECATED! Use `AssertSwatchColorActionGroup` instead -->
        <grabAttributeFrom selector="{{AdminManageSwatchSection.nthSwatch(nthSwatch)}}" userInput="style" stepKey="grabStyle1"/>
        <assertEquals stepKey="assertStyle1">
            <actualResult type="string">{$grabStyle1}</actualResult>
            <expectedResult type="string">{{expectedStyle}}</expectedResult>
        </assertEquals>
    </actionGroup>

    <actionGroup name="assertStorefrontSwatchColor">
        <annotations>
            <description>Validates that the Storefront Product has the provided Swatch with the provided Color.</description>
        </annotations>
        <arguments>
            <argument name="nthSwatch" type="string" defaultValue="1"/>
            <argument name="expectedRgb" type="string" defaultValue="rgb(231, 77, 60)"/>
        </arguments>

        <!-- NOTICE: This ActionGroup is DEPRECATED! Use `AssertStorefrontSwatchColorActionGroup` instead -->
        <grabAttributeFrom selector="{{StorefrontProductInfoMainSection.nthSwatchOption(nthSwatch)}}" userInput="style" stepKey="grabStyle1"/>
        <assertEquals stepKey="assertStyle1">
            <actualResult type="string">{$grabStyle1}</actualResult>
            <expectedResult type="string">background: center center no-repeat {{expectedRgb}};</expectedResult>
        </assertEquals>
    </actionGroup>

    <actionGroup name="openSwatchMenuByIndex">
        <annotations>
            <description>Options the Swatch Menu based on the provided Index.</description>
        </annotations>
        <arguments>
            <argument name="index" type="string" defaultValue="0"/>
        </arguments>

        <!-- NOTICE: This ActionGroup is DEPRECATED! Use `OpenSwatchMenuByIndexActionGroup` instead -->
        <executeJS function="jQuery('#swatch_window_option_option_{{index}}').click()" stepKey="clickSwatch1"/>
    </actionGroup>

    <actionGroup name="StorefrontSelectSwatchOptionOnProductPage">
        <arguments>
            <argument name="optionName" type="string"/>
        </arguments>
        <!-- NOTICE: This ActionGroup is DEPRECATED! Use `StorefrontSelectSwatchOptionOnProductPageActionGroup` instead -->
        <click selector="{{StorefrontProductInfoMainSection.swatchOptionByLabel(optionName)}}" stepKey="clickSwatchOption"/>
    </actionGroup>

    <actionGroup name="StorefrontAssertSwatchOptionPrice">
        <arguments>
            <argument name="optionName" type="string"/>
            <argument name="optionPrice" type="string"/>
        </arguments>
        <!-- NOTICE: This ActionGroup is DEPRECATED! Use `StorefrontAssertSwatchOptionPriceActionGroup` instead -->
        <click selector="{{StorefrontProductInfoMainSection.swatchOptionByLabel(optionName)}}" stepKey="clickOnOption"/>
        <see userInput="{{optionPrice}}" selector="{{StorefrontProductInfoMainSection.productPrice}}" stepKey="seeOptionPrice"/>
    </actionGroup>

    <actionGroup name="StorefrontSelectSwatchOptionOnProductPageAndCheckImage" extends="StorefrontSelectSwatchOptionOnProductPage">
        <arguments>
            <argument name="fileName" type="string" defaultValue="magento-logo"/>
        </arguments>
        <!-- NOTICE: This ActionGroup is DEPRECATED! Use `StorefrontSelectSwatchOptionOnProductPageAndCheckImageActionGroup` instead -->
        <seeElement selector="{{StorefrontProductMediaSection.productImageActive(fileName)}}" stepKey="seeActiveImageDefault"/>
    </actionGroup>

    <actionGroup name="StorefrontUpdateCartConfigurableProductWithSwatches">
        <arguments>
            <argument name="product"/>
            <argument name="productOption" type="string"/>
        </arguments>

        <!-- NOTICE: This ActionGroup is DEPRECATED! Use `StorefrontUpdateCartConfigurableProductWithSwatchesActionGroup` instead -->
        <click selector="{{CheckoutCartProductSection.nthEditButton('1')}}" stepKey="clickEditConfigurableProductButton"/>
        <waitForPageLoad stepKey="waitForStorefrontProductPageLoad"/>
        <click selector="{{StorefrontProductInfoMainSection.visualSwatchOption(productOption)}}" stepKey="changeSwatchAttributeOption"/>
        <click selector="{{StorefrontProductInfoMainSection.updateCart}}" stepKey="clickUpdateCartButton"/>
        <waitForElementVisible selector="{{StorefrontMessagesSection.success}}" stepKey="waitForSuccessMessage"/>
        <see selector="{{StorefrontMessagesSection.success}}" userInput="{{product.name}} was updated in your shopping cart." stepKey="assertSuccessMessage"/>
    </actionGroup>
</actionGroups>
