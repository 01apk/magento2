<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types=1);

namespace Magento\UrlRewrite\Model;

use Magento\Catalog\Model\Category;
use Magento\Catalog\Model\Product;
use Magento\Cms\Model\Page;
use Magento\Framework\App\ObjectManager;
use Magento\Framework\Data\Collection\AbstractDb;
use Magento\Framework\EntityManager\EventManager;
use Magento\Framework\Indexer\CacheContext;
use Magento\Framework\Model\AbstractModel;
use Magento\Framework\Model\Context;
use Magento\Framework\Model\ResourceModel\AbstractResource;
use Magento\Framework\Registry;
use Magento\Framework\Serialize\Serializer\Json;
use Magento\UrlRewrite\Controller\Adminhtml\Url\Rewrite;
use Magento\UrlRewrite\Model\ResourceModel\UrlRewriteCollection;

/**
 * UrlRewrite model class
 *
 * @method int getEntityId()
 * @method string getEntityType()
 * @method int getRedirectType()
 * @method int getStoreId()
 * @method int getIsAutogenerated()
 * @method string getTargetPath()
 * @method UrlRewrite setEntityId(int $value)
 * @method UrlRewrite setEntityType(string $value)
 * @method UrlRewrite setRequestPath($value)
 * @method UrlRewrite setTargetPath($value)
 * @method UrlRewrite setRedirectType($value)
 * @method UrlRewrite setStoreId($value)
 * @method UrlRewrite setDescription($value)
 */
class UrlRewrite extends AbstractModel
{
    /**
     * @var Json
     */
    private $serializer;

    /**
     * @var CacheContext|mixed|null
     */
    private $cacheContext;

    /**
     * @var EventManager|mixed|null
     */
    private $eventManager;

    /**
     * @var array
     */
    private $entityToCacheTagMap;

    /**
     * UrlRewrite constructor.
     *
     * @param Context $context
     * @param Registry $registry
     * @param AbstractResource|null $resource
     * @param AbstractDb|null $resourceCollection
     * @param array $data
     * @param Json|null $serializer
     * @param CacheContext|null $cacheContext
     * @param EventManager|null $eventManager
     * @param array $entityToCacheTagMap
     */
    public function __construct(
        Context $context,
        Registry $registry,
        AbstractResource $resource = null,
        AbstractDb $resourceCollection = null,
        array $data = [],
        Json $serializer = null,
        CacheContext $cacheContext = null,
        EventManager $eventManager = null,
        array $entityToCacheTagMap = []
    )
    {
        $this->serializer = $serializer ?: ObjectManager::getInstance()->get(Json::class);
        $this->cacheContext = $cacheContext ?: ObjectManager::getInstance()->get(CacheContext::class);
        $this->eventManager = $eventManager ?: ObjectManager::getInstance()->get(EventManager::class);
        $this->entityToCacheTagMap = $entityToCacheTagMap;
        parent::__construct($context, $registry, $resource, $resourceCollection, $data);
    }

    /**
     * Initialize corresponding resource model
     *
     * @return void
     */
    protected function _construct()
    {
        $this->_init(ResourceModel\UrlRewrite::class);
        $this->_collectionName = UrlRewriteCollection::class;
    }

    /**
     * Get metadata
     *
     * @return array
     * @api
     */
    public function getMetadata()
    {
        $metadata = $this->getData(\Magento\UrlRewrite\Service\V1\Data\UrlRewrite::METADATA);
        return !empty($metadata) ? $this->serializer->unserialize($metadata) : [];
    }

    /**
     * Overwrite Metadata in the object.
     *
     * @param array|string $metadata
     * @return $this
     */
    public function setMetadata($metadata)
    {
        if (is_array($metadata)) {
            $metadata = $this->serializer->serialize($metadata);
        }
        return $this->setData(\Magento\UrlRewrite\Service\V1\Data\UrlRewrite::METADATA, $metadata);
    }

    /**
     * Clean cache for the entity which was affected by updating UrlRewrite
     *
     * @param $entityType
     * @param $entityId
     */
    private function cleanCacheForEntity($entityType, $entityId)
    {
        if ($entityType !== Rewrite::ENTITY_TYPE_CUSTOM && array_key_exists($entityType, $this->entityToCacheTagMap)) {
            $cacheKey = $this->entityToCacheTagMap[$entityType];

            $this->cacheContext->registerEntities($cacheKey, [$entityId]);
            $this->eventManager->dispatch('clean_cache_by_tags', ['object' => $this->cacheContext]);
        }
    }

    public function afterDelete()
    {
        $this->cleanCacheForEntity($this->getEntityType(), $this->getEntityId());
        return parent::afterDelete();
    }

    public function afterSave()
    {
        $this->cleanCacheForEntity($this->getEntityType(), $this->getEntityId());
        return parent::afterSave();
    }
}
