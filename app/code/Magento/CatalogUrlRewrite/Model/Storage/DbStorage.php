<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
namespace Magento\CatalogUrlRewrite\Model\Storage;

use Magento\Framework\Api\DataObjectHelper;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\App\ResourceConnection;
use Magento\UrlRewrite\Model\Storage\DbStorage as BaseDbStorage;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite;
use Magento\UrlRewrite\Service\V1\Data\UrlRewriteFactory;
use Psr\Log\LoggerInterface;

class DbStorage extends BaseDbStorage
{
    /**
     * DbStorage constructor.
     *
     * @param UrlRewriteFactory $urlRewriteFactory
     * @param DataObjectHelper $dataObjectHelper
     * @param ResourceConnection $resource
     * @param LoggerInterface|null $logger
     * @param ScopeConfigInterface|null $config
     */
    public function __construct(
        UrlRewriteFactory $urlRewriteFactory,
        DataObjectHelper $dataObjectHelper,
        ResourceConnection $resource,
        LoggerInterface $logger = null,
        ScopeConfigInterface $config = null
    ) {
        parent::__construct($urlRewriteFactory, $dataObjectHelper, $resource, $logger);
        $this->config = $config ?: \Magento\Framework\App\ObjectManager::getInstance()
            ->get(ScopeConfigInterface ::class);
    }

    /**
     * {@inheritdoc}
     */
    public function findOneByData(array $data)
    {
        if (isset($data[UrlRewrite::ENTITY_TYPE])
            && $data[UrlRewrite::ENTITY_TYPE] == 'product'
            && !empty($data[UrlRewrite::METADATA]["category_id"])
        ) {
            $categoryId = $data[UrlRewrite::METADATA]["category_id"];
            unset($data[UrlRewrite::METADATA]);
            $productFromDb = $this->connection->fetchRow($this->prepareSelect($data));
            $data[UrlRewrite::ENTITY_ID] = $categoryId;
            $data[UrlRewrite::ENTITY_TYPE] = 'category';
            $categoryFromDb = $this->connection->fetchRow($this->prepareSelect($data));

            $productFromDb[UrlRewrite::REQUEST_PATH] = str_replace(
                    $this->getCategoryUrlSuffix($data[UrlRewrite::STORE_ID]),
                    '',
                    $categoryFromDb[UrlRewrite::REQUEST_PATH]
                )
                . '/' . $productFromDb[UrlRewrite::REQUEST_PATH];
            return $this->createUrlRewrite($productFromDb);
        }

        $result = parent::findOneByData($data);

        if (!($result === null
            && array_key_exists(UrlRewrite::REQUEST_PATH, $data)
            && is_string($data[UrlRewrite::REQUEST_PATH])
            && strpos($data[UrlRewrite::REQUEST_PATH], '/') > 0 //exists and not start from
        )) {
            return $result;
        }

        $requestPath = $data[UrlRewrite::REQUEST_PATH];

        $productUrl = pathinfo($requestPath, PATHINFO_BASENAME);
        $data[UrlRewrite::IS_AUTOGENERATED] = true;
        $data[UrlRewrite::REQUEST_PATH] = [
            $productUrl
        ];

        $productFromDb = $this->connection->fetchRow($this->prepareSelect($data));

        if ($productFromDb === false) {
            return $result;
        }
        $categoryPath = str_replace( '/' . $productUrl, '', $requestPath)
            . $this->getCategoryUrlSuffix($data[UrlRewrite::STORE_ID]);

        $data[UrlRewrite::REQUEST_PATH] = [
            $categoryPath
        ];
        $categoryFromDb = $this->connection->fetchRow($this->prepareSelect($data));

        if ($categoryFromDb === false) {
            return $result;
        }
        $productFromDb[UrlRewrite::REQUEST_PATH] = $requestPath;
        $productFromDb[UrlRewrite::TARGET_PATH] = $productFromDb[UrlRewrite::TARGET_PATH]
            . '/category/'
            .  $categoryFromDb[UrlRewrite::ENTITY_ID];

        return $this->createUrlRewrite($productFromDb);
    }

    /**
     * Get Category UrlSuffix
     *
     * @param int $storeId
     * @return string
     */
    protected function getCategoryUrlSuffix($storeId = null)
    {
        return $this->config->getValue(
            'catalog/seo/category_url_suffix',
            //\Magento\CatalogUrlRewrite\Model\CategoryUrlPathGenerator::XML_PATH_CATEGORY_URL_SUFFIX,
            \Magento\Store\Model\ScopeInterface::SCOPE_STORE,
            $storeId
        );
    }

    public function findAllByData(array $data)
    {
        return parent::findAllByData($data); // TODO: Change the autogenerated stub
    }

}
