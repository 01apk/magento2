<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types=1);

namespace Magento\CatalogUrlRewrite\Model;

use Magento\Framework\App\Cache\TypeListInterface;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\App\Config\Value as ConfigValue;
use Magento\Framework\Data\Collection\AbstractDb;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Model\Context;
use Magento\Framework\Model\ResourceModel\AbstractResource;
use Magento\Framework\Registry;
use Magento\Store\Model\StoreManagerInterface;
use Magento\UrlRewrite\Model\ResourceModel\UrlRewrite;
use Magento\Store\Model\ScopeInterface;

/**
 * Table Cleaner in case of switching generate_rewrites_on_save off
 */
class TableCleaner extends ConfigValue
{
    const GENERATE_REWRITES_ON_SAVE_PATH = 'catalog/seo/generate_rewrites_on_save';
    const AUTO_GENERATED_ROW_FLAG = 1;
    const URL_REWRITE_GENERATION_OFF_FLAG = 0;

    /**
     * @var UrlRewrite
     */
    private $urlRewrite;

    /**
     * @var array
     */
    private $storeIds;

    /**
     * @var StoreManagerInterface
     */
    private $storeManager;

    /**
     * @param UrlRewrite $urlRewrite
     * @param Context $context
     * @param Registry $registry
     * @param ScopeConfigInterface $config
     * @param TypeListInterface $cacheTypeList
     * @param StoreManagerInterface $storeManager
     * @param AbstractResource|null $resource
     * @param AbstractDb|null $resourceCollection
     * @param array $data
     */
    public function __construct(
        UrlRewrite $urlRewrite,
        Context $context,
        Registry $registry,
        ScopeConfigInterface $config,
        TypeListInterface $cacheTypeList,
        StoreManagerInterface $storeManager,
        AbstractResource $resource = null,
        AbstractDb $resourceCollection = null,
        array $data = []
    ) {
        parent::__construct($context, $registry, $config, $cacheTypeList, $resource, $resourceCollection, $data);
        $this->urlRewrite = $urlRewrite;
        $this->storeManager = $storeManager;
    }

    /**
     * @inheritDoc
     * @return ConfigValue
     * @throws LocalizedException
     */
    public function afterSave()
    {
        if ($this->getValue() == self::URL_REWRITE_GENERATION_OFF_FLAG) {
            $this->clearOldData();
        }
        return parent::afterSave();
    }

    /**
     * Clear urlrewrites for products in categories
     */
    private function clearOldData(): void
    {
        $tableName = $this->urlRewrite->getMainTable();
        $conditions = [
            'metadata LIKE ?' => '{"category_id"%',
            'is_autogenerated = ?' => self::AUTO_GENERATED_ROW_FLAG,
            'store_id  IN (?)' => (array)$this->getStoreIds()
        ];
        $this->urlRewrite->getConnection()->delete($tableName, $conditions);
    }

    /**
     * Get store ids from website or store
     *
     * @return array|null
     * @throws LocalizedException
     */
    private function getStoreIds()
    {
        if (!$this->storeIds) {
            if ($this->getScope() == ScopeInterface::SCOPE_STORES) {
                $this->storeIds = [$this->getScopeId()];
            } elseif ($this->getScope() == ScopeInterface::SCOPE_WEBSITES) {
                $website = $this->storeManager->getWebsite($this->getScopeId());
                $this->storeIds = array_keys($website->getStoreIds());
            } else {
                $this->storeIds = array_keys($this->storeManager->getStores());
            }
        }
        return $this->storeIds;
    }
}
