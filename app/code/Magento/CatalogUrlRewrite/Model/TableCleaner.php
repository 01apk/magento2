<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
declare(strict_types=1);

namespace Magento\CatalogUrlRewrite\Model;

use Magento\AsynchronousOperations\Api\Data\OperationInterfaceFactory;
use Magento\Framework\App\Cache\TypeListInterface;
use Magento\Framework\App\Config\ScopeConfigInterface;
use Magento\Framework\App\Config\Value as ConfigValue;
use Magento\Framework\Bulk\BulkManagementInterface;
use Magento\Framework\Data\Collection\AbstractDb;
use Magento\Framework\DataObject\IdentityGeneratorInterface;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Model\Context;
use Magento\Framework\Model\ResourceModel\AbstractResource;
use Magento\Framework\Registry;
use Magento\Framework\Serialize\SerializerInterface;
use Magento\UrlRewrite\Model\ResourceModel\UrlRewrite;

/**
 * Table Cleaner in case of switching generate_rewrites_on_save off
 */
class TableCleaner extends ConfigValue
{
    const GENERATE_REWRITES_ON_SAVE_PATH = 'catalog/seo/generate_rewrites_on_save';
    const BATCH_SIZE = 100000;
    const AUTO_GENERATED_ROW_FLAG = 1;
    const URL_REWRITE_GENERATION_OFF_FLAG = 0;

    /**
     * @var UrlRewrite
     */
    private $connection;

    /**
     * @var BulkManagementInterface
     */
    private $bulkManagement;

    /**
     * @var OperationInterfaceFactory
     */
    private $operationFactory;

    /**
     * @var IdentityGeneratorInterface
     */
    private $identityService;

    /**
     * @var SerializerInterface
     */
    private $serializer;
    /**
     * @var UrlRewrite
     */
    private $urlRewrite;

    /**
     * @param UrlRewrite $urlRewrite
     * @param Context $context
     * @param Registry $registry
     * @param ScopeConfigInterface $config
     * @param TypeListInterface $cacheTypeList
     * @param BulkManagementInterface $bulkManagement
     * @param OperationInterfaceFactory $operartionFactory
     * @param IdentityGeneratorInterface $identityService
     * @param SerializerInterface $serializer
     * @param AbstractResource|null $resource
     * @param AbstractDb|null $resourceCollection
     * @param array $data
     */
    public function __construct(
        UrlRewrite $urlRewrite,
        Context $context,
        Registry $registry,
        ScopeConfigInterface $config,
        TypeListInterface $cacheTypeList,
        BulkManagementInterface $bulkManagement,
        OperationInterfaceFactory $operartionFactory,
        IdentityGeneratorInterface $identityService,
        SerializerInterface $serializer,
        AbstractResource $resource = null,
        AbstractDb $resourceCollection = null,
        array $data = []
    ) {
        parent::__construct($context, $registry, $config, $cacheTypeList, $resource, $resourceCollection, $data);
        $this->connection = $urlRewrite->getConnection();
        $this->bulkManagement = $bulkManagement;
        $this->operationFactory = $operartionFactory;
        $this->identityService = $identityService;
        $this->serializer = $serializer;
        $this->urlRewrite = $urlRewrite;
    }

    /**
     * @return ConfigValue
     * @throws LocalizedException
     */
    public function afterSave()
    {
        if ($this->getValue() == self::URL_REWRITE_GENERATION_OFF_FLAG) {
            $this->clearOldData();
        }
        return parent::afterSave();
    }

    public function dispatch()
    {
        return $this;
    }

    public function getValue()
    {
        return parent::getValue();
    }

    private function clearOldData(): void
    {
        $tableName = $this->urlRewrite->getMainTable();
        $conditions = [
            'metadata LIKE ?' => '{"category_id"%',
            'is_autogenerated = ?' => self::AUTO_GENERATED_ROW_FLAG
        ];
        $this->connection->delete($tableName, $conditions);
    }
}
