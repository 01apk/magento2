<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminAssignConfigurableProductToCustomWebsiteTest">
        <annotations>
            <features value="ConfigurableProduct"/>
            <stories value="Create configurable product"/>
            <title value="Assign configurable product to custom website"/>
            <description value="Admin should not be able to assign configurable product to custom website"/>
            <testCaseId value="MC-13694"/>
            <severity value="CRITICAL"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <!-- Create attribute with 2 options to be used in children products -->
            <createData entity="productAttributeWithTwoOptionsNotVisible" stepKey="createConfigProductAttribute"/>
            <createData entity="productAttributeOption1" stepKey="createConfigProductAttributeOptionOne">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <createData entity="productAttributeOption2" stepKey="createConfigProductAttributeOptionTwo">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <createData entity="AddToDefaultSet" stepKey="createConfigAddToAttributeSet">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getConfigAttributeOptionOne">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>
            <getData entity="ProductAttributeOptionGetter" index="2" stepKey="getConfigAttributeOptionTwo">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>

            <!-- Create 2 children products that will be a part of the configurable product -->
            <createData entity="ApiSimpleOne" stepKey="createFirstSimpleProduct">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOptionOne"/>
            </createData>
            <createData entity="ApiSimpleTwo" stepKey="createSecondSimpleProduct">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOptionTwo"/>
            </createData>

             <!-- Add special price in one product -->
            <createData entity="specialProductPrice" stepKey="specialPrice">
                <requiredEntity createDataKey="createFirstSimpleProduct" />
            </createData>

            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <!-- Delete configurable product -->
            <actionGroup ref="deleteProductUsingProductGrid" stepKey="deleteProduct">
                <argument name="product" value="ApiConfigurableProduct"/>
            </actionGroup>

            <!-- Delete store view -->
            <actionGroup ref="AdminDeleteStoreViewActionGroup" stepKey="deleteCreatedStoreView"/>

            <!-- Delete configurable product creation -->
            <deleteData createDataKey="createFirstSimpleProduct" stepKey="deleteFirstSimpleProduct"/>
            <deleteData createDataKey="createSecondSimpleProduct" stepKey="deleteSecondSimpleProduct"/>
            <deleteData createDataKey="createConfigProductAttribute" stepKey="deleteConfigProductAttribute"/>

            <!-- Log out -->
            <actionGroup ref="logout" stepKey="logout"/>
        </after>

        <!--Create store view -->
        <actionGroup ref="AdminCreateStoreViewActionGroup" stepKey="createStoreView"/>

        <!--Create configurable product -->
        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="amOnProductGridPage"/>
        <waitForPageLoad stepKey="waitForProductGridPageLoad"/>
        <actionGroup ref="goToCreateProductPage" stepKey="createConfigurableProduct">
            <argument name="product" value="ApiConfigurableProduct"/>
        </actionGroup>

        <!--Fill configurable product values -->
        <actionGroup ref="fillMainProductForm" stepKey="fillConfigurableProductValues">
            <argument name="product" value="ApiConfigurableProduct"/>
        </actionGroup>

        <!-- Create product configurations and add attribute and select all options -->
        <actionGroup ref="generateConfigurationsByAttributeCode" stepKey="generateConfigurationsByAttributeCode" after="fillConfigurableProductValues">
            <argument name="attributeCode" value="$$createConfigProductAttribute.attribute_code$$"/>
        </actionGroup>

        <!-- Add associated products to configurations grid -->
        <actionGroup ref="addProductToConfigurationsGrid" stepKey="addFirstSimpleProduct">
            <argument name="sku" value="$$createFirstSimpleProduct.sku$$"/>
            <argument name="name" value="$$createConfigProductAttributeOptionOne.option[store_labels][1][label]$$"/>
        </actionGroup>

        <actionGroup ref="addProductToConfigurationsGrid" stepKey="addSecondSimpleProduct">
            <argument name="sku" value="$$createSecondSimpleProduct.sku$$"/>
            <argument name="name" value="$$createConfigProductAttributeOptionTwo.option[store_labels][1][label]$$"/>
        </actionGroup>

        <!-- Save configurable product -->
        <actionGroup ref="saveProductForm" stepKey="saveConfigurableProduct"/>

        <!-- Switch default store view on store view created below -->
        <amOnPage url="{{StorefrontHomePage.url}}" stepKey="amOnStorefrontPage"/>
        <waitForPageLoad stepKey="waitForStorefrontPageLoad"/>
        <actionGroup ref="StorefrontSwitchStoreViewActionGroup" stepKey="SwitchStoreView">
            <argument name="storeView" value="customStore"/>
        </actionGroup>

        <!-- Assert product special price is present on created store view created below -->
        <amOnPage url="{{ApiConfigurableProduct.urlKey}}.html" stepKey="amOnProductPage"/>
        <waitForPageLoad stepKey="waitForProductPageLoad"/>
        <see  userInput="{{customStore.name}}" selector="{{StorefrontHeaderSection.storeViewName}}" stepKey="seeChosenStoreViewName"/>
        <actionGroup ref="assertConfigurableProductWithSpecialPriceOnStorefrontProductPage" stepKey="assertConfigurableProductWithSpecialPriceOnStorefrontProductPage">
            <argument name="option" value="$$createConfigProductAttributeOptionOne.option[store_labels][1][label]$$"/>
            <argument name="price" value="$$createFirstSimpleProduct.price$$"/>
            <argument name="specialPrice" value="$$specialPrice.price$$"/>
        </actionGroup>
    </test>
</tests>
