<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminUpdatesConfigurableProductOptionsInCustomersCartTest">
        <annotations>
            <features value="Configurable Product"/>
            <stories value="Edit configurable product"/>
            <title value="Admin should be able to edit configurable product's options in Customers Cart"/>
            <description value="Verify that Admin can edit configurable product's options in Customers Cart"/>
            <severity value="AVERAGE"/>
            <testCaseId value="MC-43289"/>
            <group value="customer"/>
            <group value="ConfigurableProduct"/>
        </annotations>

        <before>
            <!-- Set customer account to Global -->
            <magentoCLI command="config:set {{CustomerAccountShareGlobalConfigData.path}} {{CustomerAccountShareGlobalConfigData.value}}" stepKey="shareCustomerAccountsToGlobal"/>

            <!-- Login as Admin -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>

            <!-- Create second website, store group, and store view  -->
            <actionGroup ref="AdminCreateWebsiteActionGroup" stepKey="createNewWebsite">
                <argument name="newWebsiteName" value="{{NewWebSiteData.name}}"/>
                <argument name="websiteCode" value="{{NewWebSiteData.code}}"/>
            </actionGroup>
            <actionGroup ref="AdminCreateNewStoreGroupActionGroup" stepKey="createNewStore">
                <argument name="website" value="{{NewWebSiteData.name}}"/>
                <argument name="storeGroupName" value="{{NewStoreData.name}}"/>
                <argument name="storeGroupCode" value="{{NewStoreData.code}}"/>
            </actionGroup>
            <actionGroup ref="AdminCreateStoreViewActionGroup" stepKey="createNewStoreView">
                <argument name="StoreGroup" value="NewStoreData"/>
                <argument name="customStore" value="NewStoreViewData"/>
            </actionGroup>

            <!-- Create customer -->
            <createData entity="Simple_US_Customer" stepKey="createCustomer"/>

            <!-- Create category -->
            <createData entity="_defaultCategory" stepKey="createCategory"/>

            <!-- Create configurable product -->
            <createData entity="ApiConfigurableProduct" stepKey="createConfigProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>

            <!-- Create Attribute and two Options -->
            <createData entity="productAttributeWithTwoOptions" stepKey="createConfigProductAttribute"/>
            <createData entity="productAttributeOption1" stepKey="createConfigProductAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>
            <createData entity="productAttributeOption2" stepKey="createConfigProductAttributeOption2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>

            <!-- Add to Default Set-->
            <createData entity="AddToDefaultSet" stepKey="createConfigAddToAttributeSet">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </createData>

            <!-- Get Configurable Attribute Options -->
            <getData entity="ProductAttributeOptionGetter" index="1" stepKey="getConfigAttributeOption1">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>
            <getData entity="ProductAttributeOptionGetter" index="2" stepKey="getConfigAttributeOption2">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
            </getData>

            <!-- Create tow Simple products as children options for Configurable -->
            <createData entity="ApiSimpleOne" stepKey="createFirstChildProduct">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="ApiSimpleTwo" stepKey="createSecondChildProduct">
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption2"/>
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <createData entity="ConfigurableProductTwoOptions" stepKey="createConfigProductOption1">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption1"/>
            </createData>
            <createData entity="ConfigurableProductTwoOptions" stepKey="createConfigProductOption2">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createConfigProductAttribute"/>
                <requiredEntity createDataKey="getConfigAttributeOption2"/>
            </createData>

            <!-- Add child products to Configurable-->
            <createData entity="ConfigurableProductAddChild" stepKey="AddFirstChildProductToFirstConfigurable">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createFirstChildProduct"/>
            </createData>
            <createData entity="ConfigurableProductAddChild" stepKey="AddSecondChildProductToFirstConfigurable">
                <requiredEntity createDataKey="createConfigProduct"/>
                <requiredEntity createDataKey="createSecondChildProduct"/>
            </createData>

            <!-- Assign Configurable and both Child Products to Custom Website -->
            <actionGroup ref="SearchForProductOnBackendActionGroup" stepKey="searchForProductOnAdmin">
                <argument name="product" value="$$createConfigProduct$$"/>
            </actionGroup>
            <actionGroup ref="CreatedProductConnectToWebsiteActionGroup" stepKey="processProductWebsites">
                <argument name="website" value="NewWebSiteData"/>
                <argument name="product" value="$$createConfigProduct$$"/>
            </actionGroup>
            <actionGroup ref="SearchForProductOnBackendActionGroup" stepKey="searchForFirstChildProduct">
                <argument name="product" value="$$createFirstChildProduct$$"/>
            </actionGroup>
            <actionGroup ref="CreatedProductConnectToWebsiteActionGroup" stepKey="processFirstChildProduct">
                <argument name="website" value="NewWebSiteData"/>
                <argument name="product" value="$$createFirstChildProduct$$"/>
            </actionGroup>
            <actionGroup ref="SearchForProductOnBackendActionGroup" stepKey="searchForSecondChildProduct">
                <argument name="product" value="$$createSecondChildProduct$$"/>
            </actionGroup>
            <actionGroup ref="CreatedProductConnectToWebsiteActionGroup" stepKey="processSecondChildProduct">
                <argument name="website" value="NewWebSiteData"/>
                <argument name="product" value="$$createSecondChildProduct$$"/>
            </actionGroup>

            <actionGroup ref="CliIndexerReindexActionGroup" stepKey="indexerReindexAfterCreate">
                <argument name="indices" value="catalog_product_price"/>
            </actionGroup>
            <actionGroup ref="CliCacheFlushActionGroup" stepKey="flushCache">
                <argument name="tags" value="config"/>
            </actionGroup>
        </before>

        <after>
            <!-- Cleaning Customer's cart on both Websites -->
            <actionGroup ref="StorefrontOpenHomePageActionGroup" stepKey="goToStorefrontPageForCustomWebsite"/>
            <actionGroup ref="RemoveProductFromMiniCartActionGroup" stepKey="clearShoppingCartForCustomWebsite">
                <argument name="productName" value="$createConfigProduct.name$"/>
            </actionGroup>
            <actionGroup ref="AdminSetWebsiteAsDefaultActionGroup" stepKey="setCustomWebsiteAsDefault">
                <argument name="websiteName" value="{{_defaultWebsite.name}}"/>
            </actionGroup>
            <actionGroup ref="StorefrontOpenHomePageActionGroup" stepKey="goToStorefrontPageForDefaultWebsite"/>
            <actionGroup ref="RemoveProductFromMiniCartActionGroup" stepKey="clearShoppingCartForDefaultWebsite">
                <argument name="productName" value="$createConfigProduct.name$"/>
            </actionGroup>
            <actionGroup ref="StorefrontCustomerLogoutActionGroup" stepKey="logoutStorefront"/>

            <!-- Delete Configurable and Child Products, Delete Category and Attribute -->
            <actionGroup ref="DeleteProductBySkuActionGroup" stepKey="deleteConfigurableProduct">
                <argument name="sku" value="$$createConfigProduct.sku$$"/>
            </actionGroup>
            <actionGroup ref="DeleteProductBySkuActionGroup" stepKey="deleteFirstChildProduct">
                <argument name="sku" value="$$createFirstChildProduct.sku$$"/>
            </actionGroup>
            <actionGroup ref="DeleteProductBySkuActionGroup" stepKey="deleteSecondChildProduct">
                <argument name="sku" value="$$createSecondChildProduct.sku$$"/>
            </actionGroup>
            <deleteData stepKey="deleteCategory" createDataKey="createCategory"/>
            <deleteData createDataKey="createConfigProductAttribute" stepKey="deleteConfigProductAttribute"/>

            <!-- Delete second Website -->
            <actionGroup ref="AdminDeleteWebsiteActionGroup" stepKey="deleteNewWebsite">
                <argument name="websiteName" value="{{NewWebSiteData.name}}"/>
            </actionGroup>

            <!-- Set customer account to Per Website, Logout -->
            <magentoCLI command="config:set {{CustomerAccountShareWebsiteConfigData.path}} {{CustomerAccountShareWebsiteConfigData.value}}" stepKey="shareCustomerAccountsToPerWebsite"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="amOnLogoutPage"/>
        </after>

        <!-- Login as customer -->
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="loginToStorefrontAccount">
            <argument name="Customer" value="$$createCustomer$$"/>
        </actionGroup>

        <!-- Add configurable product to the cart  -->
        <actionGroup ref="StorefrontAddConfigurableProductToTheCartActionGroup" stepKey="addConfigurableProductToCartOnDefaultWebsite">
            <argument name="urlKey" value="$$createConfigProduct.custom_attributes[url_key]$$" />
            <argument name="productAttribute" value="$$createConfigProductAttribute.default_value$$"/>
            <argument name="productOption" value="$$getConfigAttributeOption1.value$$"/>
            <argument name="qty" value="1"/>
        </actionGroup>

        <actionGroup ref="AdminSetWebsiteAsDefaultActionGroup" stepKey="setCustomWebsiteAsDefault">
            <argument name="websiteName" value="{{NewWebSiteData.name}}"/>
        </actionGroup>

        <actionGroup ref="StorefrontAddConfigurableProductToTheCartActionGroup" stepKey="addConfigurableProductToCartOnCustomWebsite">
            <argument name="urlKey" value="$$createConfigProduct.custom_attributes[url_key]$$" />
            <argument name="productAttribute" value="$$createConfigProductAttribute.default_value$$"/>
            <argument name="productOption" value="$$getConfigAttributeOption1.value$$"/>
            <argument name="qty" value="1"/>
        </actionGroup>

        <!-- Go to shopping cart of Customer in Admin-->
        <actionGroup ref="AdminOpenCustomerEditPageActionGroup" stepKey="openCustomerEditPage">
            <argument name="customerId" value="$$createCustomer.id$$"/>
        </actionGroup>
        <actionGroup ref="AdminOpenShoppingCartTabFromCustomerEditPageActionGroup" stepKey="openShoppingCartTabFromCustomerEditPage"/>

        <!-- Perform Assertions. That Product Options correctly updated after being changed by Admin for Customer carts on both websites -->
        <click selector="{{AdminCustomerCartSection.configureCartItem('1')}}" stepKey="configureProductOfCustomWebsite"/>
        <selectOption selector="{{AdminCustomerCartSection.slidePanelFirstOptionDropdown}}" userInput="$$getConfigAttributeOption2.value$$" stepKey="selectOptionForCustomWebsite"/>
        <click selector="{{AdminCustomerCartSection.slidePanelOkButton}}" stepKey="clickOk1"/>
        <grabTextFrom selector="{{AdminCustomerCartSection.productName('1')}}" stepKey="grabProductName1"/>
        <assertStringContainsString stepKey="assertProductOption1">
            <actualResult type="const">$grabProductName1</actualResult>
            <expectedResult type="const">$$getConfigAttributeOption2.label$$</expectedResult>
        </assertStringContainsString>
        <selectOption selector="{{AdminCustomerCartSection.websiteFilter}}" userInput="{{_defaultWebsite.name}}" stepKey="selectDefaultWebsite"/>
        <waitForPageLoad stepKey="waitForPageLoadingCompleteAfterWebsiteSwitched"/>
        <click selector="{{AdminCustomerCartSection.configureCartItem('1')}}" stepKey="configureProductOfDefaultWebsite"/>
        <selectOption selector="{{AdminCustomerCartSection.slidePanelFirstOptionDropdown}}" userInput="$$getConfigAttributeOption2.value$$" stepKey="selectOptionForDefaultWebsite"/>
        <click selector="{{AdminCustomerCartSection.slidePanelOkButton}}" stepKey="clickOk2"/>
        <grabTextFrom selector="{{AdminCustomerCartSection.productName('1')}}" stepKey="grabProductName2"/>
        <assertStringContainsString stepKey="assertProductOption2">
            <actualResult type="const">$grabProductName2</actualResult>
            <expectedResult type="const">$$getConfigAttributeOption2.label$$</expectedResult>
        </assertStringContainsString>
    </test>
</tests>
