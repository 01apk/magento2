<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminSortingByWebsitesTest">
        <annotations>
            <stories value="View sorting by websites"/>
            <title value="Sorting by websites in Admin"/>
            <description value="Sorting products by websites in Admin"/>
        </annotations>
        <before>
            <actionGroup ref="LoginActionGroup" stepKey="loginAsAdmin"/>

            <!--Create Website -->
            <actionGroup ref="AdminCreateWebsiteActionGroup" stepKey="createAdditionalWebsite">
                <argument name="newWebsiteName" value="Second Website"/>
                <argument name="websiteCode" value="second_website"/>
            </actionGroup>

            <!--Create Store -->
            <actionGroup ref="AdminCreateNewStoreGroupActionGroup" stepKey="createNewStore">
                <argument name="website" value="Second Website"/>
                <argument name="storeGroupName" value="Second Store"/>
                <argument name="storeGroupCode" value="second_store"/>
            </actionGroup>

            <!--Create Store view -->
            <amOnPage url="{{AdminSystemStorePage.url}}" stepKey="amOnAdminSystemStorePage"/>
            <waitForPageLoad stepKey="waitForSystemStorePage"/>
            <click selector="{{AdminStoresMainActionsSection.createStoreViewButton}}" stepKey="createStoreViewButton"/>
            <waitForPageLoad stepKey="waitForProductPageLoad"/>
            <waitForElementVisible selector="//legend[contains(., 'Store View Information')]" stepKey="waitForNewStorePageToOpen"/>
            <selectOption userInput="Second Store" selector="{{AdminNewStoreSection.storeGrpDropdown}}" stepKey="selectStoreGroup"/>
            <fillField userInput="Second Store View" selector="{{AdminNewStoreSection.storeNameTextField}}" stepKey="fillStoreViewName"/>
            <fillField userInput="second_store_view" selector="{{AdminNewStoreSection.storeCodeTextField}}" stepKey="fillStoreViewCode"/>
            <selectOption selector="{{AdminNewStoreSection.statusDropdown}}" userInput="1" stepKey="enableStoreViewStatus"/>
            <click selector="{{AdminNewStoreViewActionsSection.saveButton}}" stepKey="clickSaveStoreView" />
            <waitForElementVisible selector="{{AdminConfirmationModalSection.ok}}" stepKey="waitForModal" />
            <see selector="{{AdminConfirmationModalSection.title}}" userInput="Warning message" stepKey="seeWarning" />
            <click selector="{{AdminConfirmationModalSection.ok}}" stepKey="dismissModal" />
            <waitForPageLoad stepKey="waitForPageLoad2" time="180" />
            <waitForElementVisible selector="{{AdminStoresGridSection.storeFilterTextField}}" time="150" stepKey="waitForPageReolad"/>
            <see userInput="You saved the store view." stepKey="seeSavedMessage" />

            <!--Create a Simple Product 1 -->
            <actionGroup ref="createSimpleProductAndAddToWebsite" stepKey="createSimpleProduct1">
                <argument name="product" value="simpleProductForMassUpdate"/>
                <argument name="website" value="Second Website"/>
            </actionGroup>

            <!--Create a Simple Product 2 -->
            <actionGroup ref="createSimpleProductAndAddToWebsite" stepKey="createSimpleProduct2">
                <argument name="product" value="simpleProductForMassUpdate2"/>
                <argument name="website" value="Second Website"/>
            </actionGroup>
        </before>
        <after>
            <!--Delete website -->
            <actionGroup ref="AdminDeleteWebsiteActionGroup" stepKey="deleteSecondWebsite">
                <argument name="websiteName" value="Second Website"/>
            </actionGroup>
            <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="navigateToProductIndex"/>

            <!--Delete Products -->
            <actionGroup ref="DeleteProductActionGroup" stepKey="deleteProduct1">
                <argument name="productName" value="simpleProductForMassUpdate.name"/>
            </actionGroup>
            <actionGroup ref="DeleteProductActionGroup" stepKey="deleteProduct2">
                <argument name="productName" value="simpleProductForMassUpdate2.name"/>
            </actionGroup>
            <actionGroup ref="logout" stepKey="amOnLogoutPage"/>
        </after>

        <amOnPage url="{{AdminProductIndexPage.url}}" stepKey="navigateToCatalogProductGrid"/>
        <waitForPageLoad stepKey="waitForCatalogProductGrid"/>

        <!--Sort Ascending-->
        <click selector="{{AdminProductGridSection.columnHeader('Websites')}}" stepKey="clickWebsitesHeaderToSortAsc"/>
        <grabTextFrom selector="{{AdminProductGridSection.productGridCell('Main Website', 'Country of Manufacture')}}" stepKey="getFirstWebsitesSortAsc"/>
        <grabTextFrom selector="{{AdminProductGridSection.productGridCell('Second Website', 'Country of Manufacture')}}" stepKey="getSecondWebsitesSortAsc"/>
        <assertLessThanOrEqual expected="$getSecondPriceSortAsc" actual="$getFirstPriceSortAsc" stepKey="checkPriceAscSortCorrect"/>
        <!--Sort Descending-->
        <click selector="{{AdminProductGridSection.columnHeader('Websites')}}" stepKey="clickWebsitesHeaderToSortDesc"/>
        <grabTextFrom selector="{{AdminProductGridSection.productGridCell('Main Website', 'Country of Manufacture')}}" stepKey="getFirstWebsitesSortDesc"/>
        <grabTextFrom selector="{{AdminProductGridSection.productGridCell('Second Website', 'Country of Manufacture')}}" stepKey="getSecondWebsitesSortDesc"/>
        <assertGreaterThanOrEqual expected="$getSecondWebsitesSortDesc" actual="$getFirstWebsitesSortDesc" stepKey="checkWebsitesDescSortCorrect"/>
    </test>
</tests>
