<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCreateCmsPageEntityTest">
        <annotations>
            <features value="Cms"/>
            <title value="Create CMS Page via the Admin"/>
            <description value="Admin should be able to create a CMS Page"/>
            <group value="backend"/>
            <group value="cMSContent"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <actionGroup ref="LoginAsAdmin" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <!--Disable single store mode-->
            <magentoCLI command="config:set general/single_store_mode/enabled 0" stepKey="disableSingleStoreMode"/>
            <actionGroup ref="logout" stepKey="logout"/>
        </after>

        <!--Create CMS Content Page-->
        <!--Go to New CMS Page page-->
        <amOnPage url="{{CmsNewPagePage.url}}" stepKey="navigateToCreateNewPage"/>
        <waitForPageLoad stepKey="waitForNewPagePageLoad"/>
        <actionGroup ref="FillOutCMSPageContent" stepKey="fillBasicPageData"/>
        <!--verify successfully saved-->
        <actionGroup ref="saveCmsPage" stepKey="saveNewPage"/>
        <!--verify page on frontend-->
        <amOnPage url="{{StorefrontHomePage.url}}/{{_duplicatedCMSPage.identifier}}" stepKey="amOnPageTestPage"/>
        <actionGroup ref="AssertStoreFrontCMSPage" stepKey="verifyPageDataOnFrontend">
            <argument name="cmsTitle" value="{{_duplicatedCMSPage.title}}"/>
            <argument name="cmsContent" value="{{_duplicatedCMSPage.content}}"/>
            <argument name="cmsContentHeading" value="{{_duplicatedCMSPage.content_heading}}"/>
        </actionGroup>
        <!--verify page in grid-->
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="verifyPageInGrid">
            <argument name="CMSPage" value="_duplicatedCMSPage"/>
        </actionGroup>
        <actionGroup ref="DeletePageByUrlKeyActionGroup" stepKey="deletePage">
            <argument name="UrlKey" value="{{_duplicatedCMSPage.identifier}}"/>
        </actionGroup>

        <!--Create page for default store view-->
        <!--Go to New CMS Page page-->
        <amOnPage url="{{CmsNewPagePage.url}}" stepKey="navigateToCreateNewPage2"/>
        <waitForPageLoad stepKey="waitForNewPagePageLoad2"/>
        <!--Fill the CMS page form-->
        <actionGroup ref="FillOutCMSPageContent" stepKey="fillBasicPageDataForPageWithDefaultStore"/>
        <actionGroup ref="SelectCMSPageStoreView" stepKey="selectCMSPageStoreView">
            <argument name="storeViewName" value="Default Store View"/>
        </actionGroup>
        <!--Verify successfully saved-->
        <actionGroup ref="saveCmsPage" stepKey="savePageWithDefaultStore"/>
        <!--Navigate to page in Admin-->
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCMSPageWithDefaultStoreInAdmin">
            <argument name="CMSPage" value="_duplicatedCMSPage"/>
        </actionGroup>
        <!--Verify Page Data in Admin-->
        <actionGroup ref="AssertCMSPageContent" stepKey="verifyPageWithDefaultStoreDataInAdmin"/>
        <!--Verify Store ID-->
        <actionGroup ref="AssertCMSPageStoreId" stepKey="verifyStoreId">
            <argument name="storeId" value="1"/>
        </actionGroup>
        <!--Delete page-->
        <actionGroup ref="DeletePageByUrlKeyActionGroup" stepKey="deletePageWithDefaultStore">
            <argument name="UrlKey" value="{{_duplicatedCMSPage.identifier}}"/>
        </actionGroup>

        <!--Block Cache Exploit-->
        <!--Go to New CMS Page page-->
        <amOnPage url="{{CmsNewPagePage.url}}" stepKey="navigateToCreateNewPage3"/>
        <waitForPageLoad stepKey="waitForNewPagePageLoad3"/>
        <!--Fill the CMS page form-->
        <actionGroup ref="FillOutCMSPageContent" stepKey="fillBasicPageDataForPageWithBlock"/>
        <fillField selector="{{CmsNewPagePageContentSection.content}}" userInput="{{block class=&apos;Magento\Framework\View\Element\Text&apos; text=&apos;bla bla bla&apos; cache_key=&apos;BACKEND_ACL_RESOURCES&apos; cache_lifetime=999}}" stepKey="fillFieldContent"/>
        <actionGroup ref="SelectCMSPageStoreView" stepKey="selectCMSPageStoreViewForPageWithBlock">
            <argument name="storeViewName" value="Default Store View"/>
        </actionGroup>
        <!--Verify successfully saved-->
        <actionGroup ref="saveCmsPage" stepKey="savePageWithBlock"/>
        <!--verify page on frontend-->
        <amOnPage url="{{StorefrontHomePage.url}}/{{_duplicatedCMSPage.identifier}}" stepKey="amOnPageWithBlock"/>
        <actionGroup ref="AssertStoreFrontCMSPage" stepKey="verifyPageWithBlockDataOnFrontend">
            <argument name="cmsTitle" value="{{_duplicatedCMSPage.title}}"/>
            <argument name="cmsContent" value="bla bla bla"/>
            <argument name="cmsContentHeading" value="{{_duplicatedCMSPage.content_heading}}"/>
        </actionGroup>
        <!--Delete page with block-->
        <actionGroup ref="DeletePageByUrlKeyActionGroup" stepKey="deletePageWithBlock">
            <argument name="UrlKey" value="{{_duplicatedCMSPage.identifier}}"/>
        </actionGroup>

        <!--Create CMS page with single store mode-->
        <!--Enable single store mode-->
        <magentoCLI command="config:set general/single_store_mode/enabled 1" stepKey="enableSingleStoreMode"/>
        <!--Go to New CMS Page page-->
        <amOnPage url="{{CmsNewPagePage.url}}" stepKey="navigateToCreateNewPage4"/>
        <waitForPageLoad stepKey="waitForNewPagePageLoad4"/>
        <!--Fill the CMS page form-->
        <actionGroup ref="FillOutCMSPageContent" stepKey="fillBasicPageDataInSingleStoreMode"/>
        <!--Verify successfully saved-->
        <actionGroup ref="saveCmsPage" stepKey="savePageInSingleStoreMode"/>
        <!--verify page on frontend-->
        <amOnPage url="{{StorefrontHomePage.url}}/{{_duplicatedCMSPage.identifier}}" stepKey="amOnPageTestPageInSingleStoreMode"/>
        <actionGroup ref="AssertStoreFrontCMSPage" stepKey="verifyPageDataOnFrontendInSingleStoreMode">
            <argument name="cmsTitle" value="{{_duplicatedCMSPage.title}}"/>
            <argument name="cmsContent" value="{{_duplicatedCMSPage.content}}"/>
            <argument name="cmsContentHeading" value="{{_duplicatedCMSPage.content_heading}}"/>
        </actionGroup>
        <!--Navigate to page in Admin-->
        <actionGroup ref="navigateToCreatedCMSPage" stepKey="navigateToCMSPageInAdminInSingleStoreMode">
            <argument name="CMSPage" value="_duplicatedCMSPage"/>
        </actionGroup>
        <!--Verify Page Data in Admin-->
        <actionGroup ref="AssertCMSPageContent" stepKey="verifyPageDataInAdminInSingleStoreMode"/>
        <!--Delete page-->
        <actionGroup ref="DeletePageByUrlKeyActionGroup" stepKey="deletePageInSingleStoreMode">
            <argument name="UrlKey" value="{{_duplicatedCMSPage.identifier}}"/>
        </actionGroup>

        <!--Create disabled page-->
        <!--Go to New CMS Page page-->
        <amOnPage url="{{CmsNewPagePage.url}}" stepKey="navigateToCreateNewPage5"/>
        <waitForPageLoad stepKey="waitForNewPagePageLoad5"/>
        <!--Fill the CMS page form-->
        <actionGroup ref="FillOutCMSPageContent" stepKey="fillBasicPageDataForDisabledPage"/>
        <actionGroup ref="SetCMSPageDisabled" stepKey="setCMSPageDisabled"/>
        <!--Verify successfully saved-->
        <actionGroup ref="saveCmsPage" stepKey="saveDisabledPage"/>
        <!--Check that page is disabled on frontend-->
        <amOnPage url="{{StorefrontHomePage.url}}/{{_duplicatedCMSPage.identifier}}" stepKey="amOnDeactivatedPageOnFrontend"/>
        <waitForPageLoad stepKey="waitForDeactivatedPageLoadOnFrontend"/>
        <see userInput="Whoops, our bad..." stepKey="seePageError"/>
        <!--Delete page-->
        <actionGroup ref="DeletePageByUrlKeyActionGroup" stepKey="deleteDisabledPage">
            <argument name="UrlKey" value="{{_duplicatedCMSPage.identifier}}"/>
        </actionGroup>
    </test>
</tests>